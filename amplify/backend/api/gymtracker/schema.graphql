type ScheduledWorkout @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  workoutID: ID! @index(name: "byWorkout")
  userID: ID! @index(name: "byUser")
}

type ReadyWorkout @model @auth(rules: [{allow: public}]) {
  id: ID!
  weightlifted: Int
  bodyweightreps: Int
  starttimestamp: AWSTimestamp
  endtimestamp: AWSTimestamp
  duration: Int
  User: User @belongsTo
  userID: ID! @index(name: "byUser")
  workoutID: ID! @index(name: "byWorkout")
  donesets: Int
  totalreps: Int
}

type Exercises @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  target: String!
  type: String!
}

type SingleSet @model @auth(rules: [{allow: public}]) {
  id: ID!
  reps: [Int!]
  weight: [Int!]
  Exercises: Exercises @hasOne
}

type Workout @model @auth(rules: [{allow: public}]) {
  id: ID!
  belongsTo: User @belongsTo
  name: String!
  sets: [SingleSet] @hasMany
  type: String!
  ScheduledWorkouts: [ScheduledWorkout] @hasMany(indexName: "byWorkout", fields: ["id"])
  ReadyWorkouts: [ReadyWorkout] @hasMany(indexName: "byWorkout", fields: ["id"])
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  workouts: [Workout] @hasMany
  weightlifted: Int!
  bodyweightreps: Int!
  workouttime: Int
  ReadyWorkout: [ReadyWorkout] @hasMany(indexName: "byUser", fields: ["id"])
  bodyweight: Int
  ScheduledWorkouts: [ScheduledWorkout] @hasMany(indexName: "byUser", fields: ["id"])
} 